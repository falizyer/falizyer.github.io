{"version":3,"sources":["model/App.model.ts","contexts.ts","hooks/UseTranslation.ts","i18n.ts","common/NotFound.tsx","assets/logo.svg","serviceWorker.ts","App.constant.ts","common/ProxyRoute.tsx","common/AppNavigation.tsx","common/ProxyRedirect.tsx","common/Header.tsx","common/LanguageSwitcher.tsx","App.tsx","provider/LanguageProvider.tsx","index.tsx"],"names":["AppLanguages","LanguageActionType","LanguageDefaultValue","language","en","dispatch","LanguageContext","createContext","useTranslation","useContext","t","id","i18n","changeLanguage","lng","type","CHANGE_LANGUAGE","payload","use","detector","backend","init","fallbackLng","defaultNS","debug","keySeparator","interpolation","escapeValue","resources","translation","ru","module","exports","Boolean","window","location","hostname","match","ROUTES","notFound","path","component","React","lazy","About","exact","Contacts","ProxyRoute","props","process","REACT_APP_ROOT_PATH","AppNavigation","className","to","ProxyRedirect","Header","src","logo","alt","title","children","languageList","value","label","LanguageSwitcher","defaultValue","onChange","event","target","then","map","languageItem","key","App","fallback","NotFound","render","LanguageReducer","state","action","Error","LanguageProvider","useReducer","Provider","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f69ef1b.chunk.js","sourcesContent":["import { FunctionComponent } from \"react\";\r\nimport { RouteProps } from \"react-router-dom\";\r\n\r\ninterface AppRoutes {\r\n  About: string;\r\n  Contacts: string;\r\n  notFound: string;\r\n}\r\n\r\nexport type Routes = {\r\n  readonly [P in keyof AppRoutes]: RouteProps & {\r\n    component: FunctionComponent;\r\n    path: string;\r\n  }\r\n};\r\n\r\nexport enum AppLanguages {\r\n  en = \"en\",\r\n  ru = \"ru\"\r\n}\r\n","import { createContext } from \"react\";\r\nimport { AppLanguages } from \"./model/App.model\";\r\n\r\nexport enum LanguageActionType {\r\n  CHANGE_LANGUAGE = \"CHANGE_LANGUAGE\"\r\n}\r\n\r\nexport interface ILanguageAction {\r\n  type: LanguageActionType;\r\n  payload?: AppLanguages\r\n}\r\n\r\nexport interface ILanguageState {\r\n  language: AppLanguages;\r\n}\r\n\r\nexport type ILanguageProviderState = ILanguageState & { dispatch: any };\r\n\r\nexport const LanguageDefaultValue: ILanguageProviderState = {\r\n  language: AppLanguages.en,\r\n  dispatch: null\r\n};\r\n\r\nexport const LanguageContext = createContext(LanguageDefaultValue);\r\n","import i18n from \"i18n\";\r\nimport { useContext } from \"react\";\r\nimport { LanguageActionType, LanguageContext } from \"contexts\";\r\n\r\nexport default function useTranslation() {\r\n  const { dispatch } = useContext(LanguageContext);\r\n  return {\r\n    t: (id: string): string => i18n.t(id),\r\n    i18n,\r\n    changeLanguage(lng: string) {\r\n      dispatch({ type: LanguageActionType.CHANGE_LANGUAGE, payload: lng });\r\n    }\r\n  };\r\n}","import i18n from \"i18next\";\r\nimport detector from \"i18next-browser-languagedetector\";\r\nimport backend from \"i18next-xhr-backend\";\r\nimport { AppLanguages } from \"./model/App.model\";\r\n\r\nimport en from \"assets/locales/en.json\";\r\nimport ru from \"assets/locales/ru.json\";\r\n\r\ni18n\r\n  .use(detector)\r\n  .use(backend)\r\n  .init({\r\n    lng: AppLanguages.en,\r\n    fallbackLng: AppLanguages.en,\r\n    defaultNS: \"translation\",\r\n    debug: true,\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false\r\n    },\r\n    resources: {\r\n      en: {\r\n        translation: en\r\n      },\r\n      ru: {\r\n        translation: ru\r\n      }\r\n    }\r\n  });\r\n\r\nexport default i18n;\r\n","import React from \"react\";\r\n\r\nexport default function() {\r\n  return <></>;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It\"s the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can\"t reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Routes } from \"model/App.model\";\r\n\r\nexport const ROUTES: Routes = {\r\n  notFound: {\r\n    path: \"/not-found\",\r\n    component: React.lazy(() => import(\"./common/NotFound\"))\r\n  },\r\n  About: {\r\n    path: \"/about\",\r\n    exact: true,\r\n    component: React.lazy(() => import(\"./component/About\"))\r\n  },\r\n  Contacts: {\r\n    path: \"/contacts\",\r\n    exact: true,\r\n    component: React.lazy(() => import(\"./component/Contacts\"))\r\n  }\r\n};","import React, { PropsWithChildren } from \"react\";\r\nimport { Route, RouteProps } from \"react-router-dom\";\r\n\r\nfunction ProxyRoute(props: PropsWithChildren<RouteProps>) {\r\n  return (<Route {...props} path={`${process.env.REACT_APP_ROOT_PATH}/${props.path}`} />);\r\n}\r\n\r\nexport default ProxyRoute;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ROUTES } from \"App.constant\";\r\n\r\nimport useTranslation from \"hooks/UseTranslation\";\r\n\r\nimport \"./AppNavigation.scss\";\r\n\r\nfunction AppNavigation() {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <nav className=\"app-navigation\">\r\n      <ul className=\"app-navigation__list\">\r\n        <li className=\"app-navigation__list__item\">\r\n          <Link to={ ROUTES.About.path }>\r\n            { t(\"app.navigation.about\") }\r\n          </Link>\r\n        </li>\r\n        <li className=\"app-navigation__list__item\">\r\n          <Link to={ ROUTES.Contacts.path }>\r\n            { t(\"app.navigation.contacts\") }\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default AppNavigation;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport { Redirect, RedirectProps } from \"react-router-dom\";\r\n\r\nfunction ProxyRedirect(props: PropsWithChildren<RedirectProps>) {\r\n  return (<Redirect {...props} path={`${process.env.REACT_APP_ROOT_PATH}/${props.path}`} />);\r\n}\r\n\r\nexport default ProxyRedirect;\r\n","import React, { PropsWithChildren } from \"react\";\r\n\r\nimport logo from \"assets/logo.svg\";\r\n\r\nfunction Header(props: PropsWithChildren<object>) {\r\n  return (\r\n    <header className=\"app-header\">\r\n      <h1 className=\"app-header__logo\"><img src={ logo } alt=\"title\" title=\"title\"/></h1>\r\n      { props.children }\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { ChangeEvent, useContext } from \"react\";\r\nimport { AppLanguages } from \"model/App.model\";\r\nimport useTranslation from \"hooks/UseTranslation\";\r\nimport { LanguageActionType, LanguageContext } from \"../contexts\";\r\nimport i18n from \"../i18n\";\r\n\r\nconst languageList = [ {\r\n  value: AppLanguages.en,\r\n  label: \"app.languages.en\"\r\n}, {\r\n  value: AppLanguages.ru,\r\n  label: \"app.languages.ru\"\r\n} ];\r\n\r\nfunction LanguageSwitcher() {\r\n  const { t, i18n, changeLanguage } = useTranslation();\r\n\r\n  return (\r\n    <select\r\n      className=\"language-switcher\"\r\n      defaultValue={ i18n.language }\r\n      onChange={handleChangeLanguage}\r\n    >\r\n      {\r\n        languageList.map(languageItem => (\r\n          <option\r\n            key={ languageItem.value }\r\n            value={ languageItem.value }\r\n            label={ t(languageItem.label) }\r\n          >\r\n            { t(languageItem.label) }\r\n          </option>\r\n        ))\r\n      }\r\n    </select>\r\n  );\r\n\r\n  function handleChangeLanguage(event: ChangeEvent<HTMLSelectElement>) {\r\n    i18n.changeLanguage(event.target.value)\r\n      .then(() => changeLanguage(i18n.language));\r\n  }\r\n}\r\n\r\nexport default LanguageSwitcher;\r\n","import React, { Suspense } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { ROUTES } from \"./App.constant\";\r\n\r\nimport ProxyRoute from \"./common/ProxyRoute\";\r\n\r\nimport NotFound from \"./common/NotFound\";\r\nimport AppNavigation from \"./common/AppNavigation\";\r\nimport ProxyRedirect from \"./common/ProxyRedirect\";\r\nimport Header from \"./common/Header\";\r\nimport LanguageSwitcher from \"./common/LanguageSwitcher\";\r\n\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Suspense fallback={ (<div>loading...</div>) }>\r\n          <AppNavigation/>\r\n          <LanguageSwitcher/>\r\n        </Suspense>\r\n      </Header>\r\n      <Suspense fallback={ (<div>loading...</div>) }>\r\n        <Switch>\r\n          <ProxyRoute\r\n            path={ ROUTES.About.path }\r\n            component={ ROUTES.About.component }\r\n            exact={ ROUTES.About.exact }\r\n          />\r\n          <ProxyRoute\r\n            path={ ROUTES.Contacts.path }\r\n            component={ ROUTES.Contacts.component }\r\n            exact={ ROUTES.Contacts.exact }\r\n          />\r\n\r\n          <Route>\r\n            <NotFound/>\r\n          </Route>\r\n        </Switch>\r\n      </Suspense>\r\n\r\n      <Route render={ () => (<ProxyRedirect to={ ROUTES.About.path }/>) }/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { PropsWithChildren, useEffect, useReducer } from \"react\";\r\nimport { ILanguageAction, ILanguageState, LanguageActionType, LanguageContext, LanguageDefaultValue } from \"contexts\";\r\nimport i18n from \"i18n\";\r\n\r\nfunction LanguageReducer(state: ILanguageState, action: ILanguageAction) {\r\n  switch (action.type) {\r\n    case LanguageActionType.CHANGE_LANGUAGE:\r\n      return {\r\n        ...state,\r\n        language: (action as Required<ILanguageAction>).payload\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction LanguageProvider(props: PropsWithChildren<object>) {\r\n  const [ state, dispatch ] = useReducer(LanguageReducer, LanguageDefaultValue);\r\n\r\n  return (\r\n    <LanguageContext.Provider value={ { ...state, dispatch } }>\r\n      { props.children }\r\n    </LanguageContext.Provider>\r\n  );\r\n}\r\n\r\nexport default LanguageProvider;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./i18n\";\r\n\r\nimport App from \"./App\";\r\n\r\nimport \"./index.scss\";\r\nimport LanguageProvider from \"./provider/LanguageProvider\";\r\n\r\nReactDOM.render((\r\n  <BrowserRouter basename={ process.env.REACT_APP_ROOT_PATH }>\r\n    <LanguageProvider>\r\n      <App/>\r\n    </LanguageProvider>\r\n  </BrowserRouter>\r\n), document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}